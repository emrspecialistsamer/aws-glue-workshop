AWSTemplateFormatVersion: '2010-09-09'
Description: 'Stack 1: Deploy VPC with 3 public subnet, Security Group, S3 and Route53 Private Hosted Zone (v2)'

Parameters:
  S3BucketName:
    Type: String
    Description: S3 Location to store workshop resources

  StackPrefix:
    Type: String
    Description: Prefix for resource names 

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.0.1/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '10.0.16.1/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: '10.0.192.1/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  RouteTablePublicSubnet1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTablePublicSubnet2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTablePublicSubnet3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicSubnet1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTablePublicSubnet1
  RouteTableAssociationPublicSubnet2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTablePublicSubnet2
  RouteTableAssociationPublicSubnet3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref RouteTablePublicSubnet3
  RouteTablePublicSubnet1InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublicSubnet1
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTablePublicSubnet2InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublicSubnet2
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTablePublicSubnet3InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublicSubnet3
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicSubnet1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationPublicSubnet2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationPublicSubnet3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref NetworkAclPublic
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  EMRSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '-', [!Ref StackPrefix, 'EMRSecurityGroup'] ]
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          CidrIp: "0.0.0.0/0"
          FromPort: 22
          ToPort: 22
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref WorkshopSecurityGroup

  WorkshopSecurityGroupSelfReference:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WorkshopSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref WorkshopSecurityGroup

  WorkshopSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '-', [!Ref StackPrefix, 'WorkshopSecurityGroup'] ]
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          CidrIp: "0.0.0.0/0"
          FromPort: 22
          ToPort: 22

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Join [ '-', [!Ref S3BucketName, !Ref 'AWS::AccountId'] ]

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: {
            "Statement":[{
                "Effect":"Allow",
                "Principal": "*",
                "Action":"*",
                "Resource":"*"
            }]
        }
      RouteTableIds:
        - !Ref RouteTablePublicSubnet1
        - !Ref RouteTablePublicSubnet2
        - !Ref RouteTablePublicSubnet3
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  DMSVpcRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: dms-vpc-role
      AssumeRolePolicyDocument:
        Version : '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole'
      Path: /

Outputs:

  VpcId:
      Description: 'VPC Id'
      Value: !Ref VPC

  PublicSubnet1Id:
      Description: 'Public Subnet 1'
      Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: 'Public Subnet 2'
    Value: !Ref PublicSubnet2

  PublicSubnet3Id:
    Description: 'Public Subnet 3'
    Value: !Ref PublicSubnet3

  WorkshopSecurityGroup:
    Description: 'Security Group'
    Value: !Ref WorkshopSecurityGroup

  EMRSecurityGroup:
    Description: 'Security Group'
    Value: !Ref EMRSecurityGroup

  BucketName:
      Description: 'S3 BucketName'
      Value: !Ref S3Bucket
